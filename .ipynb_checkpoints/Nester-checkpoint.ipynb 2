{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8529bbc1-51bf-4ded-a45c-a159ca6fe97c",
   "metadata": {},
   "source": [
    "# Nester\n",
    "Nester is the succceding step to [chipper](https://github.com/CreanzaLab/chipper/blob/master/README.md). This version of Nester is contained in this notebook as a compilation of various data science techniques to semi-automize syntaxxing of bird song syllables. I say semi-automize as the algorithm has a sub 75% accuracy in creating these syllable clusters which can vary for your dataset depending on factors such as quality, song complexity, and quantity of datapoints. This is why human intervention in machine learning algorithm was deemed necessary to achieve complete accuracy without compromising effeciency. Nester mainly uses UMAP and HDBSCAN algorithms curated by the [avgn](https://github.com/timsainb/avgn_paper/tree/V2) package."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffa7a315-1ab8-41ed-a684-50697991d814",
   "metadata": {},
   "source": [
    "*Python version requirement = 3.10.16*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1c222181-5e16-46af-81ff-67914d19a7e8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: absl-py==2.3.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 1)) (2.3.0)\n",
      "Requirement already satisfied: anyio==4.9.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 2)) (4.9.0)\n",
      "Requirement already satisfied: argon2-cffi==25.1.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 3)) (25.1.0)\n",
      "Requirement already satisfied: argon2-cffi-bindings==21.2.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 4)) (21.2.0)\n",
      "Requirement already satisfied: arrow==1.3.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 5)) (1.3.0)\n",
      "Requirement already satisfied: asttokens==3.0.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 6)) (3.0.0)\n",
      "Requirement already satisfied: astunparse==1.6.3 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 7)) (1.6.3)\n",
      "Requirement already satisfied: async-lru==2.0.5 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 8)) (2.0.5)\n",
      "Requirement already satisfied: attrs==25.3.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 9)) (25.3.0)\n",
      "Requirement already satisfied: audioread==3.0.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 10)) (3.0.1)\n",
      "Requirement already satisfied: babel==2.17.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 11)) (2.17.0)\n",
      "Requirement already satisfied: backcall==0.2.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 12)) (0.2.0)\n",
      "Requirement already satisfied: beautifulsoup4==4.13.4 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 13)) (4.13.4)\n",
      "Requirement already satisfied: bleach==6.2.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 14)) (6.2.0)\n",
      "Requirement already satisfied: certifi==2025.4.26 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 15)) (2025.4.26)\n",
      "Requirement already satisfied: cffi==1.17.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 16)) (1.17.1)\n",
      "Requirement already satisfied: charset-normalizer==3.4.2 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 17)) (3.4.2)\n",
      "Requirement already satisfied: click==8.2.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 18)) (8.2.1)\n",
      "Requirement already satisfied: colorama==0.4.6 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 19)) (0.4.6)\n",
      "Requirement already satisfied: comm==0.2.2 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 20)) (0.2.2)\n",
      "Requirement already satisfied: contourpy==1.3.2 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 21)) (1.3.2)\n",
      "Requirement already satisfied: cycler==0.12.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 22)) (0.12.1)\n",
      "Requirement already satisfied: debugpy==1.8.14 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 23)) (1.8.14)\n",
      "Requirement already satisfied: decorator==5.2.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 24)) (5.2.1)\n",
      "Requirement already satisfied: defusedxml==0.7.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 25)) (0.7.1)\n",
      "Requirement already satisfied: docopt==0.6.2 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 26)) (0.6.2)\n",
      "Requirement already satisfied: exceptiongroup==1.3.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 27)) (1.3.0)\n",
      "Requirement already satisfied: executing==2.2.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 28)) (2.2.0)\n",
      "Requirement already satisfied: fastjsonschema==2.21.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 29)) (2.21.1)\n",
      "Requirement already satisfied: flatbuffers==25.2.10 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 30)) (25.2.10)\n",
      "Requirement already satisfied: fonttools==4.58.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 31)) (4.58.1)\n",
      "Requirement already satisfied: fqdn==1.5.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 32)) (1.5.1)\n",
      "Requirement already satisfied: gast==0.6.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 33)) (0.6.0)\n",
      "Requirement already satisfied: google-pasta==0.2.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 34)) (0.2.0)\n",
      "Requirement already satisfied: grpcio==1.72.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 35)) (1.72.1)\n",
      "Requirement already satisfied: h11==0.16.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 36)) (0.16.0)\n",
      "Requirement already satisfied: h5py==3.13.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 37)) (3.13.0)\n",
      "Requirement already satisfied: hdbscan==0.8.40 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 38)) (0.8.40)\n",
      "Requirement already satisfied: httpcore==1.0.9 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 39)) (1.0.9)\n",
      "Requirement already satisfied: httpx==0.28.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 40)) (0.28.1)\n",
      "Requirement already satisfied: idna==3.10 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 41)) (3.10)\n",
      "Requirement already satisfied: imageio==2.37.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 42)) (2.37.0)\n",
      "Requirement already satisfied: ipykernel==6.29.5 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 43)) (6.29.5)\n",
      "Requirement already satisfied: ipympl==0.9.7 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 44)) (0.9.7)\n",
      "Requirement already satisfied: ipython==8.12.3 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 45)) (8.12.3)\n",
      "Requirement already satisfied: ipython-genutils==0.2.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 46)) (0.2.0)\n",
      "Requirement already satisfied: ipywidgets==8.1.7 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 47)) (8.1.7)\n",
      "Requirement already satisfied: isoduration==20.11.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 48)) (20.11.0)\n",
      "Requirement already satisfied: jedi==0.19.2 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 49)) (0.19.2)\n",
      "Requirement already satisfied: Jinja2==3.1.6 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 50)) (3.1.6)\n",
      "Requirement already satisfied: joblib==1.5.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 51)) (1.5.1)\n",
      "Requirement already satisfied: json5==0.12.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 52)) (0.12.0)\n",
      "Requirement already satisfied: jsonpointer==3.0.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 53)) (3.0.0)\n",
      "Requirement already satisfied: jsonschema==4.24.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 54)) (4.24.0)\n",
      "Requirement already satisfied: jsonschema-specifications==2025.4.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 55)) (2025.4.1)\n",
      "Requirement already satisfied: jupyter-events==0.12.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 56)) (0.12.0)\n",
      "Requirement already satisfied: jupyter-highlight-selected-word==0.2.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 57)) (0.2.0)\n",
      "Requirement already satisfied: jupyter-lsp==2.2.5 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 58)) (2.2.5)\n",
      "Requirement already satisfied: jupyter_client==8.6.3 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 59)) (8.6.3)\n",
      "Requirement already satisfied: jupyter_contrib_core==0.4.2 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 60)) (0.4.2)\n",
      "Requirement already satisfied: jupyter_contrib_nbextensions==0.7.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 61)) (0.7.0)\n",
      "Requirement already satisfied: jupyter_core==5.8.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 62)) (5.8.1)\n",
      "Requirement already satisfied: jupyter_nbextensions_configurator==0.6.4 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 63)) (0.6.4)\n",
      "Requirement already satisfied: jupyter_server==2.16.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 64)) (2.16.0)\n",
      "Requirement already satisfied: jupyter_server_terminals==0.5.3 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 65)) (0.5.3)\n",
      "Requirement already satisfied: jupyterlab==4.4.3 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 66)) (4.4.3)\n",
      "Requirement already satisfied: jupyterlab_pygments==0.3.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 67)) (0.3.0)\n",
      "Requirement already satisfied: jupyterlab_server==2.27.3 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 68)) (2.27.3)\n",
      "Requirement already satisfied: jupyterlab_widgets==3.0.15 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 69)) (3.0.15)\n",
      "Requirement already satisfied: keras==3.10.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 70)) (3.10.0)\n",
      "Requirement already satisfied: kiwisolver==1.4.8 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 71)) (1.4.8)\n",
      "Requirement already satisfied: lazy_loader==0.4 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 72)) (0.4)\n",
      "Requirement already satisfied: libclang==18.1.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 73)) (18.1.1)\n",
      "Requirement already satisfied: librosa==0.11.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 74)) (0.11.0)\n",
      "Requirement already satisfied: llvmlite==0.44.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 75)) (0.44.0)\n",
      "Requirement already satisfied: lxml==5.4.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 76)) (5.4.0)\n",
      "Requirement already satisfied: Markdown==3.8 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 77)) (3.8)\n",
      "Requirement already satisfied: markdown-it-py==3.0.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 78)) (3.0.0)\n",
      "Requirement already satisfied: MarkupSafe==3.0.2 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 79)) (3.0.2)\n",
      "Requirement already satisfied: matplotlib==3.10.3 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 80)) (3.10.3)\n",
      "Requirement already satisfied: matplotlib-inline==0.1.7 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 81)) (0.1.7)\n",
      "Requirement already satisfied: mdurl==0.1.2 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 82)) (0.1.2)\n",
      "Requirement already satisfied: mistune==3.1.3 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 83)) (3.1.3)\n",
      "Requirement already satisfied: ml_dtypes==0.5.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 84)) (0.5.1)\n",
      "Requirement already satisfied: msgpack==1.1.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 85)) (1.1.0)\n",
      "Requirement already satisfied: namex==0.1.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 86)) (0.1.0)\n",
      "Requirement already satisfied: nbclient==0.10.2 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 87)) (0.10.2)\n",
      "Requirement already satisfied: nbconvert==7.16.6 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 88)) (7.16.6)\n",
      "Requirement already satisfied: nbformat==5.10.4 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 89)) (5.10.4)\n",
      "Requirement already satisfied: nest-asyncio==1.6.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 90)) (1.6.0)\n",
      "Requirement already satisfied: networkx==3.4.2 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 91)) (3.4.2)\n",
      "Requirement already satisfied: nltk==3.9.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 92)) (3.9.1)\n",
      "Requirement already satisfied: noisereduce==3.0.3 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 93)) (3.0.3)\n",
      "Requirement already satisfied: notebook==7.4.3 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 94)) (7.4.3)\n",
      "Requirement already satisfied: notebook_shim==0.2.4 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 95)) (0.2.4)\n",
      "Requirement already satisfied: numba==0.61.2 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 96)) (0.61.2)\n",
      "Requirement already satisfied: numpy==2.1.3 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 97)) (2.1.3)\n",
      "Requirement already satisfied: opt_einsum==3.4.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 98)) (3.4.0)\n",
      "Requirement already satisfied: optree==0.16.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 99)) (0.16.0)\n",
      "Requirement already satisfied: overrides==7.7.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 100)) (7.7.0)\n",
      "Requirement already satisfied: packaging==25.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 101)) (25.0)\n",
      "Requirement already satisfied: pandas==2.2.3 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 102)) (2.2.3)\n",
      "Requirement already satisfied: pandocfilters==1.5.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 103)) (1.5.1)\n",
      "Requirement already satisfied: parso==0.8.4 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 104)) (0.8.4)\n",
      "Requirement already satisfied: pathlib2==2.3.7.post1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 105)) (2.3.7.post1)\n",
      "Requirement already satisfied: pickleshare==0.7.5 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 106)) (0.7.5)\n",
      "Requirement already satisfied: pillow==11.2.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 107)) (11.2.1)\n",
      "Requirement already satisfied: pipreq==0.4 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 108)) (0.4)\n",
      "Requirement already satisfied: pipreqs==0.5.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 109)) (0.5.0)\n",
      "Requirement already satisfied: platformdirs==4.3.8 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 110)) (4.3.8)\n",
      "Requirement already satisfied: pooch==1.8.2 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 111)) (1.8.2)\n",
      "Requirement already satisfied: prometheus_client==0.22.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 112)) (0.22.1)\n",
      "Requirement already satisfied: prompt_toolkit==3.0.51 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 113)) (3.0.51)\n",
      "Requirement already satisfied: protobuf==5.29.5 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 114)) (5.29.5)\n",
      "Requirement already satisfied: psutil==7.0.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 115)) (7.0.0)\n",
      "Requirement already satisfied: pure_eval==0.2.3 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 116)) (0.2.3)\n",
      "Requirement already satisfied: pycparser==2.22 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 117)) (2.22)\n",
      "Requirement already satisfied: Pygments==2.19.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 118)) (2.19.1)\n",
      "Requirement already satisfied: pynndescent==0.5.13 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 119)) (0.5.13)\n",
      "Requirement already satisfied: pyparsing==3.2.3 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 120)) (3.2.3)\n",
      "Requirement already satisfied: python-dateutil==2.9.0.post0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 121)) (2.9.0.post0)\n",
      "Requirement already satisfied: python-json-logger==3.3.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 122)) (3.3.0)\n",
      "Requirement already satisfied: pytz==2025.2 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 123)) (2025.2)\n",
      "Requirement already satisfied: pywin32==310 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 124)) (310)\n",
      "Requirement already satisfied: pywinpty==2.0.15 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 125)) (2.0.15)\n",
      "Requirement already satisfied: PyYAML==6.0.2 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 126)) (6.0.2)\n",
      "Requirement already satisfied: pyzmq==26.4.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 127)) (26.4.0)\n",
      "Requirement already satisfied: referencing==0.36.2 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 128)) (0.36.2)\n",
      "Requirement already satisfied: regex==2024.11.6 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 129)) (2024.11.6)\n",
      "Requirement already satisfied: requests==2.32.3 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 130)) (2.32.3)\n",
      "Requirement already satisfied: rfc3339-validator==0.1.4 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 131)) (0.1.4)\n",
      "Requirement already satisfied: rfc3986-validator==0.1.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 132)) (0.1.1)\n",
      "Requirement already satisfied: rich==14.0.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 133)) (14.0.0)\n",
      "Requirement already satisfied: rpds-py==0.25.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 134)) (0.25.1)\n",
      "Requirement already satisfied: scikit-image==0.25.2 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 135)) (0.25.2)\n",
      "Requirement already satisfied: scikit-learn==1.6.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 136)) (1.6.1)\n",
      "Requirement already satisfied: scipy==1.15.3 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 137)) (1.15.3)\n",
      "Requirement already satisfied: seaborn==0.13.2 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 138)) (0.13.2)\n",
      "Requirement already satisfied: Send2Trash==1.8.3 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 139)) (1.8.3)\n",
      "Requirement already satisfied: six==1.17.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 140)) (1.17.0)\n",
      "Requirement already satisfied: sniffio==1.3.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 141)) (1.3.1)\n",
      "Requirement already satisfied: soundfile==0.13.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 142)) (0.13.1)\n",
      "Requirement already satisfied: soupsieve==2.7 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 143)) (2.7)\n",
      "Requirement already satisfied: soxr==0.5.0.post1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 144)) (0.5.0.post1)\n",
      "Requirement already satisfied: stack-data==0.6.3 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 145)) (0.6.3)\n",
      "Requirement already satisfied: tensorboard==2.19.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 146)) (2.19.0)\n",
      "Requirement already satisfied: tensorboard-data-server==0.7.2 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 147)) (0.7.2)\n",
      "Requirement already satisfied: tensorflow==2.19.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 148)) (2.19.0)\n",
      "Requirement already satisfied: tensorflow-io-gcs-filesystem==0.31.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 149)) (0.31.0)\n",
      "Requirement already satisfied: termcolor==3.1.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 150)) (3.1.0)\n",
      "Requirement already satisfied: terminado==0.18.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 151)) (0.18.1)\n",
      "Requirement already satisfied: threadpoolctl==3.6.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 152)) (3.6.0)\n",
      "Requirement already satisfied: tifffile==2025.5.10 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 153)) (2025.5.10)\n",
      "Requirement already satisfied: tinycss2==1.4.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 154)) (1.4.0)\n",
      "Requirement already satisfied: tomli==2.2.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 155)) (2.2.1)\n",
      "Requirement already satisfied: tornado==6.5.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 156)) (6.5.1)\n",
      "Requirement already satisfied: tqdm==4.67.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 157)) (4.67.1)\n",
      "Requirement already satisfied: traitlets==5.14.3 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 158)) (5.14.3)\n",
      "Requirement already satisfied: types-python-dateutil==2.9.0.20250516 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 159)) (2.9.0.20250516)\n",
      "Requirement already satisfied: typing_extensions==4.14.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 160)) (4.14.0)\n",
      "Requirement already satisfied: tzdata==2025.2 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 161)) (2025.2)\n",
      "Requirement already satisfied: umap==0.1.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 162)) (0.1.1)\n",
      "Requirement already satisfied: umap-learn==0.5.7 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 163)) (0.5.7)\n",
      "Requirement already satisfied: uri-template==1.3.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 164)) (1.3.0)\n",
      "Requirement already satisfied: urllib3==2.4.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 165)) (2.4.0)\n",
      "Requirement already satisfied: wcwidth==0.2.13 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 166)) (0.2.13)\n",
      "Requirement already satisfied: webcolors==24.11.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 167)) (24.11.1)\n",
      "Requirement already satisfied: webencodings==0.5.1 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 168)) (0.5.1)\n",
      "Requirement already satisfied: websocket-client==1.8.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 169)) (1.8.0)\n",
      "Requirement already satisfied: Werkzeug==3.1.3 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 170)) (3.1.3)\n",
      "Requirement already satisfied: widgetsnbextension==4.0.14 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 171)) (4.0.14)\n",
      "Requirement already satisfied: wrapt==1.17.2 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 172)) (1.17.2)\n",
      "Requirement already satisfied: yarg==0.1.9 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from -r requirements.txt (line 173)) (0.1.9)\n",
      "Requirement already satisfied: wheel<1.0,>=0.23.0 in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from astunparse==1.6.3->-r requirements.txt (line 7)) (0.45.1)\n",
      "Requirement already satisfied: setuptools in c:\\users\\ramma\\anaconda3\\envs\\tf_env\\lib\\site-packages (from jupyter_contrib_core==0.4.2->-r requirements.txt (line 60)) (78.1.1)\n"
     ]
    }
   ],
   "source": [
    "# === installing dependencies === \n",
    "!pip install -r requirements.txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "196afbbd-9f00-4974-99d7-4d0c8589cbb1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# === Setup Environment ===\n",
    "from env import * "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d58c6af3-9e07-4e02-ad0e-fec20c7c14db",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "json_path:C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\data\\processed\\tutorial-birds\\2025-06-19_15-15-32\\JSON\n",
      "output_dir:C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\data\\output_figures\n",
      "save_loc:C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\data\\tutorial-birds.pickle\n",
      "csv_path:C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\data\\tutorial-birds.csv\n",
      "csv_path_corrected:C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\data\\tutorial-birds_corrected.csv\n",
      "pickle_corrected:C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\data\\tutorial-birds_corrected.pickle\n"
     ]
    }
   ],
   "source": [
    "# === Configure Paths ===\n",
    "from paths import initialize_paths\n",
    "\n",
    "dataset_id = \"tutorial-birds\" # what do you want to name this dataset?\n",
    "paths = initialize_paths(dataset_id)  # or add dt_id=\"2025-06-19_11-30-00\" to look for a specific dt_id folder\n",
    "\n",
    "for key,value in paths.items():\n",
    "    print(f'{key}:{value}') #check they're correct\n",
    "\n",
    "json_path = paths[\"json_path\"]\n",
    "output_dir = paths[\"output_dir\"]\n",
    "save_loc = paths[\"save_loc\"]\n",
    "csv_file_path = paths[\"csv_path\"]\n",
    "csv_path_corrected = paths[\"csv_path_corrected\"]\n",
    "pickle_corrected = paths[\"pickle_corrected\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e9aaf0bc-21a3-47c9-983c-9e3eefeeb199",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Optional but recommended: Making Cell Outputs Cleaner\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\", category=FutureWarning)\n",
    "warnings.filterwarnings(\"ignore\", category=UserWarning)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "047270d3-e9c5-4597-99a8-42352c2af5d4",
   "metadata": {},
   "source": [
    "## 0.0 Segmenting Syllables\n",
    "\n",
    "In segmenting syllables you have two options:\n",
    "1. Using [Chipper]{https://github.com/CreanzaLab/chipper} to segment syllables and take the GZIP output to JSON for Nester\n",
    "2. Using [Vocalseg]{https://github.com/timsainb/vocalization-segmentation} or another automatic segmenting algorithm to automatically segment syllables using dynamic thresholding (not in this notebook)\n",
    "\n",
    "I recommend using the Chipper software to perform semi-automatic segmenting of the syllables to ensure 100% accuracy in the onsets and offsets of the syllables\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44b9a5c2-6da2-4ac9-b0f1-d3085da14b16",
   "metadata": {},
   "source": [
    "### Creating JSONS from GZIPS\n",
    "\n",
    "in this section well be creating .JSON files for processing with AVGN using the GZIP files created by the chipper software. \n",
    "SongAnalysis function was written by K.T Snyder (modified by R. Martinez) 6/9/25"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "20558284-95be-46e2-93e4-579bd0dde751",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Parent folder containing all the .gzip files\n",
    "root_directory = r'C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tutorial_birds_dataset'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "672016de-418c-4705-9776-960fbc86deb9",
   "metadata": {
    "scrolled": true
   },
   "source": [
    "\n",
    " Folder nesting should be in the example format: (this is for locating the wav files correctly)  \n",
    " \n",
    "    | ParentFolder:\n",
    " \n",
    "      | Species:\n",
    "\n",
    "        | Bird:  ( Whats important is the nesting here, the rest above can be however you like )\n",
    "      \n",
    "          | GZIPfolder:\n",
    "\n",
    "          | wavfiles\n",
    "\n",
    "         \n",
    "\n",
    " GZIP file naming should follow the convention: **SegSyllsOutput_Species-species-BirdID_F1_boutnumber**\n",
    "\n",
    " this is because of how the code is pulling the species, birdid, and boutnumber for the dataframe\n",
    " \n",
    " \n",
    " if your gzip file doesn't match this naming convention either match our naming convention\n",
    " or go and modify chipper_output_to_json.py accordingly\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "751091eb-b634-45dd-9904-8fd182818141",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gzip_dirs = find_gzip_directories(root_directory)\n",
    "# Does this match the expected number of gzip folders?\n",
    "len(gzip_dirs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2ab2b33f-8466-4f08-a9f4-e5fae5a65172",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2ab7c4d14e5947f89e8eeadca30f2fa9",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Processing directories:   0%|          | 0/11 [00:00<?, ?dir/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing directory: C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tutorial_birds_dataset\\Junco-hyemalis-139623_F1\\SegSyllsOutput_20240530_T112038\n",
      "['SegSyllsOutput_Junco-hyemalis-139623_F1_bout1.gzip', 'SegSyllsOutput_Junco-hyemalis-139623_F1_bout2.gzip', 'SegSyllsOutput_Junco-hyemalis-139623_F1_bout3.gzip', 'SegSyllsOutput_Junco-hyemalis-139623_F1_bout4.gzip', 'SegSyllsOutput_Junco-hyemalis-139623_F1_bout5.gzip', 'SegSyllsOutput_Junco-hyemalis-139623_F1_bout6.gzip']\n",
      "checkpoint A-2\n",
      "checkpoint A-1\n",
      "checkpoint A\n",
      "checkpoint B\n",
      "checkpoint C\n",
      "Processing directory: C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tutorial_birds_dataset\\Junco-hyemalis-79618_F1\\SegSyllsOutput_20240426_T171351\n",
      "['SegSyllsOutput_Junco-hyemalis-79618_F1_bout1.gzip', 'SegSyllsOutput_Junco-hyemalis-79618_F1_bout2.gzip', 'SegSyllsOutput_Junco-hyemalis-79618_F1_bout3.gzip', 'SegSyllsOutput_Junco-hyemalis-79618_F1_bout4.gzip', 'SegSyllsOutput_Junco-hyemalis-79618_F1_bout5.gzip', 'SegSyllsOutput_Junco-hyemalis-79618_F1_bout6.gzip', 'SegSyllsOutput_Junco-hyemalis-79618_F1_bout7.gzip', 'SegSyllsOutput_Junco-hyemalis-79618_F1_bout8.gzip']\n",
      "checkpoint A-2\n",
      "checkpoint A-1\n",
      "checkpoint A\n",
      "checkpoint B\n",
      "checkpoint C\n",
      "Processing directory: C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tutorial_birds_dataset\\Junco-hyemalis-139623_F1\\SegSyllsOutput_20250606_T115755\n",
      "['SegSyllsOutput_Junco-hyemalis-139623_F1_bout1.gzip']\n",
      "checkpoint A-2\n",
      "checkpoint A-1\n",
      "checkpoint A\n",
      "checkpoint B\n",
      "checkpoint C\n",
      "Processing directory: C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tutorial_birds_dataset\\Junco-hyemalis-79618_F1\\SegSyllsOutput_20240530_T111127\n",
      "['SegSyllsOutput_Junco-hyemalis-79618_F1_bout1.gzip', 'SegSyllsOutput_Junco-hyemalis-79618_F1_bout2.gzip', 'SegSyllsOutput_Junco-hyemalis-79618_F1_bout3.gzip', 'SegSyllsOutput_Junco-hyemalis-79618_F1_bout4.gzip', 'SegSyllsOutput_Junco-hyemalis-79618_F1_bout5.gzip', 'SegSyllsOutput_Junco-hyemalis-79618_F1_bout6.gzip', 'SegSyllsOutput_Junco-hyemalis-79618_F1_bout7.gzip', 'SegSyllsOutput_Junco-hyemalis-79618_F1_bout8.gzip']\n",
      "checkpoint A-2\n",
      "checkpoint A-1\n",
      "checkpoint A\n",
      "checkpoint B\n",
      "checkpoint C\n",
      "Processing directory: C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tutorial_birds_dataset\\Junco-hyemalis-79618_F1\\SegSyllsOutput_20250606_T114916\n",
      "['SegSyllsOutput_Junco-hyemalis-79618_F1_bout8.gzip']\n",
      "checkpoint A-2\n",
      "checkpoint A-1\n",
      "checkpoint A\n",
      "checkpoint B\n",
      "checkpoint C\n",
      "Processing directory: C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tutorial_birds_dataset\\Junco-hyemalis-139623_F1\\SegSyllsOutput_20250606_T115806\n",
      "['SegSyllsOutput_Junco-hyemalis-139623_F1_bout1.gzip', 'SegSyllsOutput_Junco-hyemalis-139623_F1_bout2.gzip', 'SegSyllsOutput_Junco-hyemalis-139623_F1_bout3.gzip', 'SegSyllsOutput_Junco-hyemalis-139623_F1_bout4.gzip', 'SegSyllsOutput_Junco-hyemalis-139623_F1_bout5.gzip', 'SegSyllsOutput_Junco-hyemalis-139623_F1_bout6.gzip']\n",
      "checkpoint A-2\n",
      "checkpoint A-1\n",
      "checkpoint A\n",
      "checkpoint B\n",
      "checkpoint C\n",
      "Processing directory: C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tutorial_birds_dataset\\Luscinia-megarhynchos-775292_F1\\SegSyllsOutput_20240429_T211440\n",
      "['SegSyllsOutput_Luscinia-megarhynchos-775292_F1_bout1.gzip', 'SegSyllsOutput_Luscinia-megarhynchos-775292_F1_bout2.gzip', 'SegSyllsOutput_Luscinia-megarhynchos-775292_F1_bout3.gzip', 'SegSyllsOutput_Luscinia-megarhynchos-775292_F1_bout4.gzip', 'SegSyllsOutput_Luscinia-megarhynchos-775292_F1_Bout5.gzip', 'SegSyllsOutput_Luscinia-megarhynchos-775292_F1_bout6.gzip']\n",
      "checkpoint A-2\n",
      "checkpoint A-1\n",
      "checkpoint A\n",
      "checkpoint B\n",
      "checkpoint C\n",
      "Processing directory: C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tutorial_birds_dataset\\Luscinia-megarhynchos-775292_F1\\SegSyllsOutput_20240601_T165337\n",
      "['SegSyllsOutput_Luscinia-megarhynchos-775292_F1_bout1.gzip', 'SegSyllsOutput_Luscinia-megarhynchos-775292_F1_bout2.gzip', 'SegSyllsOutput_Luscinia-megarhynchos-775292_F1_bout3.gzip', 'SegSyllsOutput_Luscinia-megarhynchos-775292_F1_bout4.gzip', 'SegSyllsOutput_Luscinia-megarhynchos-775292_F1_Bout5.gzip', 'SegSyllsOutput_Luscinia-megarhynchos-775292_F1_bout6.gzip']\n",
      "checkpoint A-2\n",
      "checkpoint A-1\n",
      "checkpoint A\n",
      "checkpoint B\n",
      "checkpoint C\n",
      "Processing directory: C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tutorial_birds_dataset\\Junco-hyemalis-79618_F1\\SegSyllsOutput_20250606_T115018\n",
      "['SegSyllsOutput_Junco-hyemalis-79618_F1_bout1.gzip', 'SegSyllsOutput_Junco-hyemalis-79618_F1_bout2.gzip', 'SegSyllsOutput_Junco-hyemalis-79618_F1_bout3.gzip', 'SegSyllsOutput_Junco-hyemalis-79618_F1_bout4.gzip', 'SegSyllsOutput_Junco-hyemalis-79618_F1_bout5.gzip', 'SegSyllsOutput_Junco-hyemalis-79618_F1_bout6.gzip', 'SegSyllsOutput_Junco-hyemalis-79618_F1_bout7.gzip', 'SegSyllsOutput_Junco-hyemalis-79618_F1_bout8.gzip']\n",
      "checkpoint A-2\n",
      "checkpoint A-1\n",
      "checkpoint A\n",
      "checkpoint B\n",
      "checkpoint C\n",
      "Processing directory: C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tutorial_birds_dataset\\Junco-hyemalis-139623_F1\\SegSyllsOutput_20240426_T153825\n",
      "['SegSyllsOutput_Junco-hyemalis-139623_F1_bout1.gzip', 'SegSyllsOutput_Junco-hyemalis-139623_F1_bout2.gzip', 'SegSyllsOutput_Junco-hyemalis-139623_F1_bout3.gzip', 'SegSyllsOutput_Junco-hyemalis-139623_F1_bout4.gzip', 'SegSyllsOutput_Junco-hyemalis-139623_F1_bout5.gzip', 'SegSyllsOutput_Junco-hyemalis-139623_F1_bout6.gzip']\n",
      "checkpoint A-2\n",
      "checkpoint A-1\n",
      "checkpoint A\n",
      "checkpoint B\n",
      "checkpoint C\n",
      "Processing directory: C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tutorial_birds_dataset\\Pipilo-maculatus-103315_F1\\SegSyllsOutput_20241105_T160458\n",
      "['SegSyllsOutput_Pipilo-maculatus-103315_F1_bout1.gzip', 'SegSyllsOutput_Pipilo-maculatus-103315_F1_bout2.gzip', 'SegSyllsOutput_Pipilo-maculatus-103315_F1_bout3.gzip', 'SegSyllsOutput_Pipilo-maculatus-103315_F1_bout4.gzip']\n",
      "checkpoint A-2\n",
      "checkpoint A-1\n",
      "checkpoint A\n",
      "checkpoint B\n",
      "checkpoint C\n"
     ]
    }
   ],
   "source": [
    "# loops through every gzipfile and runs chipper_output_to_json.py \n",
    "for gzip_dir in tqdm(gzip_dirs, desc=\"Processing directories\", unit=\"dir\"):\n",
    "    print(f\"Processing directory: {gzip_dir}\")\n",
    "    SongAnalysis(\n",
    "        cores=6, # modify cores to computer capacity\n",
    "        directory=gzip_dir,\n",
    "        json_out=json_path\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d66a16f6-02f5-44e8-aee6-1372892ba12c",
   "metadata": {},
   "source": [
    "## 0.5 Making the Initial Dataset with Spectrograms\n",
    "In this section well be creating the initial dataset with spectrogram values for processing with UMAP and HDBSCAN later. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3fae7f66-66b0-45a1-9e67-b4e7e27775a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>length_s</th>\n",
       "      <th>rate</th>\n",
       "      <th>wav_location</th>\n",
       "      <th>species</th>\n",
       "      <th>key</th>\n",
       "      <th>bird_id</th>\n",
       "      <th>start_time</th>\n",
       "      <th>end_time</th>\n",
       "      <th>audio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.126032</td>\n",
       "      <td>44100</td>\n",
       "      <td>C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...</td>\n",
       "      <td>Junco-hyemalis</td>\n",
       "      <td>bout1</td>\n",
       "      <td>139623</td>\n",
       "      <td>0.111429</td>\n",
       "      <td>0.156508</td>\n",
       "      <td>[-0.002243042, -0.019424438, -0.031600952, -0....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.126032</td>\n",
       "      <td>44100</td>\n",
       "      <td>C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...</td>\n",
       "      <td>Junco-hyemalis</td>\n",
       "      <td>bout1</td>\n",
       "      <td>139623</td>\n",
       "      <td>0.178730</td>\n",
       "      <td>0.223492</td>\n",
       "      <td>[0.05027771, 0.08128357, 0.07014465, 0.0227355...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.126032</td>\n",
       "      <td>44100</td>\n",
       "      <td>C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...</td>\n",
       "      <td>Junco-hyemalis</td>\n",
       "      <td>bout1</td>\n",
       "      <td>139623</td>\n",
       "      <td>0.245079</td>\n",
       "      <td>0.291111</td>\n",
       "      <td>[-0.09289551, -0.088394165, -0.042266846, 0.02...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   length_s   rate                                       wav_location  \\\n",
       "0  1.126032  44100  C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...   \n",
       "1  1.126032  44100  C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...   \n",
       "2  1.126032  44100  C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...   \n",
       "\n",
       "          species    key bird_id  start_time  end_time  \\\n",
       "0  Junco-hyemalis  bout1  139623    0.111429  0.156508   \n",
       "1  Junco-hyemalis  bout1  139623    0.178730  0.223492   \n",
       "2  Junco-hyemalis  bout1  139623    0.245079  0.291111   \n",
       "\n",
       "                                               audio  \n",
       "0  [-0.002243042, -0.019424438, -0.031600952, -0....  \n",
       "1  [0.05027771, 0.08128357, 0.07014465, 0.0227355...  \n",
       "2  [-0.09289551, -0.088394165, -0.042266846, 0.02...  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Initialize an empty list to collect rows of data\n",
    "rows = []\n",
    "\n",
    "# Iterate through all files in the folder\n",
    "for filename in os.listdir(json_path):\n",
    "    if filename.endswith(\".json\"):  # Process only JSON files\n",
    "        file_path = os.path.join(json_path, filename)\n",
    "        \n",
    "        # Open and load the JSON file\n",
    "        with open(file_path, 'r') as f:\n",
    "            data = json.load(f)\n",
    "            \n",
    "            # Iterate through all individuals (keys in the \"indvs\" dictionary)\n",
    "            for bird_id, bird_data in data.get(\"indvs\", {}).items():\n",
    "                # Extract syllables if present\n",
    "                syllables = bird_data.get(\"units\", {}).get(\"syllables\", {})\n",
    "                start_times = syllables.get(\"start_times\", [])\n",
    "                end_times = syllables.get(\"end_times\", [])\n",
    "                \n",
    "                # load the audio file\n",
    "                wav_location = data.get(\"wav_location\")\n",
    "                try:\n",
    "                    audio, sr = librosa.load(wav_location, sr=None)\n",
    "                except FileNotFoundError:\n",
    "                    print(f\"Audio file not found: {wav_location}\")\n",
    "                    continue\n",
    "                \n",
    "                # add rows for each syllable\n",
    "                for start, end in zip(start_times, end_times):\n",
    "                    # Extract the audio segment corresponding to the syllable\n",
    "                    start_sample = int(start * sr)\n",
    "                    end_sample = int(end * sr)\n",
    "                    audio_segment = audio[start_sample:end_sample]\n",
    "                    \n",
    "                    rows.append({\n",
    "                        \"length_s\": data.get(\"length_s\"),\n",
    "                        \"rate\": sr,\n",
    "                        \"wav_location\": wav_location,\n",
    "                        \"species\": bird_data.get(\"species\"),\n",
    "                        \"key\": bird_data.get(\"key\"),\n",
    "                        \"bird_id\": bird_id,\n",
    "                        \"start_time\": start,\n",
    "                        \"end_time\": end,\n",
    "                        \"audio\": audio_segment\n",
    "                    })\n",
    "\n",
    "# create the dataframe\n",
    "syllable_df = pd.DataFrame(rows)\n",
    "\n",
    "# Display the first few rows of the DataFrame\n",
    "syllable_df[:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b59818ef-1c8f-41e5-8175-3b5ecf99d9e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "401"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# how many syllables does my dataset have?\n",
    "len(syllable_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b833aada-f7fe-4393-adff-013e0b5d17a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ca4e46da370544a09ba312ef5a20f6f7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/401 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "401"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# removing 0 length arrays which are a result of processing errors\n",
    "df_mask  = np.array([len(i) > 0 for i in tqdm(syllable_df.audio.values)])\n",
    "syllable_df = syllable_df[np.array(df_mask)]\n",
    "# Check if any syllables were removed\n",
    "len(syllable_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6f18836b-bcdc-4b2f-ba0f-4e32a8803147",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Normalizing the audio\n",
    "syllable_df['audio'] = [librosa.util.normalize(i) for i in syllable_df.audio.values]\n",
    "sylls = syllable_df.audio.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "64315637-b05d-402c-b968-1f44ea606cb9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8a8e7227b4ff463a95a010ab32ec5709",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x633.333 with 50 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# looking at data making sure everything is good\n",
    "nrows = 5\n",
    "ncols = 10\n",
    "zoom = 2\n",
    "fig, axs = plt.subplots(ncols=ncols, nrows = nrows,figsize = (ncols*zoom, nrows+zoom/1.5))\n",
    "for i, syll in tqdm(enumerate(sylls), total = nrows*ncols):\n",
    "    ax = axs.flatten()[i]\n",
    "    ax.plot(syll)\n",
    "    if i == nrows*ncols -1:\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "999fcd6e-cae7-45d4-a12a-188c3e80d5ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "# hyperparameters for processing the dataset\n",
    "hparams = HParams(\n",
    "    num_mel_bins = 64,\n",
    "    mel_lower_edge_hertz=500,\n",
    "    mel_upper_edge_hertz=15000,\n",
    "    butter_lowcut = 500,\n",
    "    butter_highcut = 15000,\n",
    "    ref_level_db = 20,\n",
    "    min_level_db = -10,\n",
    "    mask_spec = True,\n",
    "    win_length_ms = 10,\n",
    "    hop_length_ms = 2,\n",
    "    nex=-1,\n",
    "    n_jobs=-1,\n",
    "    verbosity = 1,\n",
    ")\n",
    "n_jobs=-1 # change as needed on how many cpu cores u have for ur device\n",
    "verbosity = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "9c46e280-24bf-4795-a8ac-a424f26a1574",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "690b5f16956b42308f0ec722a2498c9f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "loading json:   0%|          | 0/24 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 16 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  18 out of  24 | elapsed:    7.6s remaining:    2.5s\n",
      "[Parallel(n_jobs=-1)]: Done  24 out of  24 | elapsed:    7.7s finished\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1bddcac2f694467f9524b2c881ef1285",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "getting unique individuals:   0%|          | 0/24 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# creating dataset object \n",
    "dataset = DataSet(dataset_id, hparams = hparams)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "51b94ace-e6a1-43cb-b3ad-7ee14a1c7716",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "24"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# how many wav files?\n",
    "len(dataset.data_files)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c8384ee7-e281-47d5-b972-7099b63ab81a",
   "metadata": {},
   "outputs": [],
   "source": [
    "syllables_wav = syllable_df.audio.values\n",
    "syllables_rate = syllable_df.rate.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ecf5712b-d113-44db-8045-730cb703af44",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Debugging making sure there are no empty syllables\n",
    "for i, syllable in enumerate(syllables_wav):\n",
    "    if syllable.size == 0:\n",
    "        print(f\"Empty syllable at index {i}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "62297afd-5703-4894-a980-5f580c9e420b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cc35f9afb39440c3b545adde3c1ce17b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "getting syllable spectrograms:   0%|          | 0/401 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 16 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   9 tasks      | elapsed:    9.8s\n",
      "[Parallel(n_jobs=-1)]: Done  18 tasks      | elapsed:   10.4s\n",
      "[Parallel(n_jobs=-1)]: Done  29 tasks      | elapsed:   10.4s\n",
      "[Parallel(n_jobs=-1)]: Done  40 tasks      | elapsed:   10.4s\n",
      "[Parallel(n_jobs=-1)]: Done  53 tasks      | elapsed:   10.5s\n",
      "[Parallel(n_jobs=-1)]: Batch computation too fast (0.19805286236167496s.) Setting batch_size=2.\n",
      "[Parallel(n_jobs=-1)]: Done  66 tasks      | elapsed:   10.5s\n",
      "[Parallel(n_jobs=-1)]: Done  81 tasks      | elapsed:   10.5s\n",
      "[Parallel(n_jobs=-1)]: Done  96 tasks      | elapsed:   10.6s\n",
      "[Parallel(n_jobs=-1)]: Batch computation too fast (0.08192729949951172s.) Setting batch_size=4.\n",
      "[Parallel(n_jobs=-1)]: Done 130 tasks      | elapsed:   10.6s\n",
      "[Parallel(n_jobs=-1)]: Batch computation too fast (0.09238052368164062s.) Setting batch_size=8.\n",
      "[Parallel(n_jobs=-1)]: Done 168 tasks      | elapsed:   10.7s\n",
      "[Parallel(n_jobs=-1)]: Done 244 tasks      | elapsed:   10.7s\n",
      "[Parallel(n_jobs=-1)]: Done 296 tasks      | elapsed:   10.8s\n",
      "[Parallel(n_jobs=-1)]: Done 317 tasks      | elapsed:   10.8s\n",
      "[Parallel(n_jobs=-1)]: Done 338 tasks      | elapsed:   10.9s\n",
      "[Parallel(n_jobs=-1)]: Done 361 tasks      | elapsed:   10.9s\n",
      "[Parallel(n_jobs=-1)]: Done 401 out of 401 | elapsed:   11.0s finished\n"
     ]
    }
   ],
   "source": [
    "# Creating Spectrograms\n",
    "\n",
    "with Parallel(n_jobs=n_jobs, verbose=verbosity) as parallel:\n",
    "    syllables_spec = parallel(\n",
    "        delayed(make_spec)(\n",
    "            syllable,\n",
    "            rate,\n",
    "            hparams=dataset.hparams,\n",
    "            mel_matrix=dataset.mel_matrix,\n",
    "            use_mel=True,\n",
    "            use_tensorflow=False,\n",
    "        )\n",
    "        for syllable, rate in tqdm(\n",
    "            zip(syllables_wav, syllables_rate),\n",
    "            total=len(syllables_rate),\n",
    "            desc=\"getting syllable spectrograms\",\n",
    "            leave=False,\n",
    "        )\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "3142f18a-e0cc-40c2-a0dd-ac03434b24bc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "401"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# how many syllables do we have?\n",
    "len(syllables_spec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2517dcd1-e2ab-4282-8134-abda3250d27e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x27fde42f910>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x1219.05 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plotting example, making sure everything is good \n",
    "plt.matshow(syllables_spec[10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "73a9d4f2-be5c-4c9e-8b2e-b1a1bc670747",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1796.88x2000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "draw_spec_set(syllables_spec, zoom=2, maxrows=10, colsize=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "93d2414f-d5ee-438e-8081-dd67d14ff9a1",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e477e654d2874addb4e35d5a60e1b4ba",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "scaling spectrograms:   0%|          | 0/401 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 16 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Batch computation too fast (0.019921064376831055s.) Setting batch_size=2.\n",
      "[Parallel(n_jobs=-1)]: Done   9 tasks      | elapsed:    0.0s\n",
      "[Parallel(n_jobs=-1)]: Done  18 tasks      | elapsed:    0.0s\n",
      "[Parallel(n_jobs=-1)]: Done  29 tasks      | elapsed:    0.0s\n",
      "[Parallel(n_jobs=-1)]: Batch computation too fast (0.06389641761779785s.) Setting batch_size=4.\n",
      "[Parallel(n_jobs=-1)]: Done  48 tasks      | elapsed:    0.0s\n",
      "[Parallel(n_jobs=-1)]: Done  74 tasks      | elapsed:    0.0s\n",
      "[Parallel(n_jobs=-1)]: Batch computation too fast (0.05178999900817871s.) Setting batch_size=8.\n",
      "[Parallel(n_jobs=-1)]: Done 104 tasks      | elapsed:    0.0s\n",
      "[Parallel(n_jobs=-1)]: Done 164 tasks      | elapsed:    0.1s\n",
      "[Parallel(n_jobs=-1)]: Done 224 tasks      | elapsed:    0.1s\n",
      "[Parallel(n_jobs=-1)]: Batch computation too fast (0.060494422912597656s.) Setting batch_size=16.\n",
      "[Parallel(n_jobs=-1)]: Done 353 tasks      | elapsed:    0.1s\n",
      "[Parallel(n_jobs=-1)]: Done 370 tasks      | elapsed:    0.2s\n",
      "[Parallel(n_jobs=-1)]: Done 401 out of 401 | elapsed:    0.2s finished\n"
     ]
    }
   ],
   "source": [
    "# optional: logging the spectrograms\n",
    "# For my initial testing i logged the spectrograms\n",
    "log_scaling_factor = 4\n",
    "with Parallel(n_jobs=n_jobs, verbose=verbosity) as parallel:\n",
    "    syllables_spec = parallel(\n",
    "        delayed(log_resize_spec)(spec, scaling_factor=log_scaling_factor)\n",
    "        for spec in tqdm(syllables_spec, desc=\"scaling spectrograms\", leave=False)\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "ae7a59f1-7e8f-4304-a045-b15d6a059c32",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 937.5x2000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# looking at spectrograms making sure everything is good\n",
    "draw_spec_set(syllables_spec, zoom=2, maxrows=10, colsize=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "65570d30-c1dd-4878-98fb-63803ea19ae7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "bdad724e97ec4adc9a25f411a1cf8bfb",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "padding spectrograms:   0%|          | 0/401 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 16 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Batch computation too fast (0.020039081573486328s.) Setting batch_size=2.\n",
      "[Parallel(n_jobs=-1)]: Done   9 tasks      | elapsed:    0.0s\n",
      "[Parallel(n_jobs=-1)]: Done  18 tasks      | elapsed:    0.0s\n",
      "[Parallel(n_jobs=-1)]: Done  29 tasks      | elapsed:    0.0s\n",
      "[Parallel(n_jobs=-1)]: Batch computation too fast (0.04992341995239258s.) Setting batch_size=4.\n",
      "[Parallel(n_jobs=-1)]: Done  48 tasks      | elapsed:    0.0s\n",
      "[Parallel(n_jobs=-1)]: Done  74 tasks      | elapsed:    0.0s\n",
      "[Parallel(n_jobs=-1)]: Batch computation too fast (0.05424904823303223s.) Setting batch_size=8.\n",
      "[Parallel(n_jobs=-1)]: Done 104 tasks      | elapsed:    0.0s\n",
      "[Parallel(n_jobs=-1)]: Done 164 tasks      | elapsed:    0.1s\n",
      "[Parallel(n_jobs=-1)]: Done 224 tasks      | elapsed:    0.1s\n",
      "[Parallel(n_jobs=-1)]: Batch computation too fast (0.06068730354309082s.) Setting batch_size=16.\n",
      "[Parallel(n_jobs=-1)]: Done 353 tasks      | elapsed:    0.1s\n",
      "[Parallel(n_jobs=-1)]: Done 370 tasks      | elapsed:    0.1s\n",
      "[Parallel(n_jobs=-1)]: Done 401 out of 401 | elapsed:    0.2s finished\n"
     ]
    }
   ],
   "source": [
    "# Padding the data\n",
    "syll_lens = [np.shape(i)[1] for i in syllables_spec]\n",
    "pad_length = np.max(syll_lens) + 2\n",
    "with Parallel(n_jobs=n_jobs, verbose=verbosity) as parallel:\n",
    "\n",
    "    syllables_spec = parallel(\n",
    "        delayed(pad_spectrogram)(spec, pad_length)\n",
    "        for spec in tqdm(\n",
    "            syllables_spec, desc=\"padding spectrograms\", leave=False\n",
    "        )\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "752d6426-7057-4f31-9fde-d4fe2a05b79a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1796.88x2000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# looking at spectrograms making sure everything is good\n",
    "draw_spec_set(syllables_spec, zoom=2, maxrows=10, colsize=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "0002a5da-25b1-4560-beb9-84f296766310",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6549a0c8a17942e7b73bb2ce61290f7c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/401 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# (optional) normalize the spectrograms into uint8, to make the dataset smaller\n",
    "def norm(x):\n",
    "    return (x - np.min(x)) / (np.max(x) - np.min(x))\n",
    "syllables_spec = [(norm(i)*255).astype('uint8') for i in tqdm(syllables_spec)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "63793366-2269-4ada-a846-8595b69a14ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating the spectrogram column with respective values\n",
    "syllable_df['spectrogram'] = syllables_spec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c17db778-8130-4db3-b608-e073e3708005",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>length_s</th>\n",
       "      <th>rate</th>\n",
       "      <th>wav_location</th>\n",
       "      <th>species</th>\n",
       "      <th>key</th>\n",
       "      <th>bird_id</th>\n",
       "      <th>start_time</th>\n",
       "      <th>end_time</th>\n",
       "      <th>audio</th>\n",
       "      <th>spectrogram</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.126032</td>\n",
       "      <td>44100</td>\n",
       "      <td>C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...</td>\n",
       "      <td>Junco-hyemalis</td>\n",
       "      <td>bout1</td>\n",
       "      <td>139623</td>\n",
       "      <td>0.111429</td>\n",
       "      <td>0.156508</td>\n",
       "      <td>[-0.011349599, -0.09828598, -0.15989809, -0.16...</td>\n",
       "      <td>[[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.126032</td>\n",
       "      <td>44100</td>\n",
       "      <td>C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...</td>\n",
       "      <td>Junco-hyemalis</td>\n",
       "      <td>bout1</td>\n",
       "      <td>139623</td>\n",
       "      <td>0.178730</td>\n",
       "      <td>0.223492</td>\n",
       "      <td>[0.26540476, 0.4290777, 0.37027788, 0.12001611...</td>\n",
       "      <td>[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.126032</td>\n",
       "      <td>44100</td>\n",
       "      <td>C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...</td>\n",
       "      <td>Junco-hyemalis</td>\n",
       "      <td>bout1</td>\n",
       "      <td>139623</td>\n",
       "      <td>0.245079</td>\n",
       "      <td>0.291111</td>\n",
       "      <td>[-0.44933206, -0.42755923, -0.20444313, 0.1096...</td>\n",
       "      <td>[[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   length_s   rate                                       wav_location  \\\n",
       "0  1.126032  44100  C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...   \n",
       "1  1.126032  44100  C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...   \n",
       "2  1.126032  44100  C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...   \n",
       "\n",
       "          species    key bird_id  start_time  end_time  \\\n",
       "0  Junco-hyemalis  bout1  139623    0.111429  0.156508   \n",
       "1  Junco-hyemalis  bout1  139623    0.178730  0.223492   \n",
       "2  Junco-hyemalis  bout1  139623    0.245079  0.291111   \n",
       "\n",
       "                                               audio  \\\n",
       "0  [-0.011349599, -0.09828598, -0.15989809, -0.16...   \n",
       "1  [0.26540476, 0.4290777, 0.37027788, 0.12001611...   \n",
       "2  [-0.44933206, -0.42755923, -0.20444313, 0.1096...   \n",
       "\n",
       "                                         spectrogram  \n",
       "0  [[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,...  \n",
       "1  [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,...  \n",
       "2  [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,...  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "syllable_df[:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "3d5972af-8bf3-4f1e-8c88-26ce16a962c8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "dcbf168fcfab447ebf9b23e3391d3cc7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/4 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ramma\\AppData\\Local\\Temp\\ipykernel_14832\\2723865572.py:19: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  indv_df.loc[:,\"syllables_sequence_pos\"] = syllables_sequence_pos\n",
      "C:\\Users\\ramma\\AppData\\Local\\Temp\\ipykernel_14832\\2723865572.py:20: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  indv_df.loc[:,\"syllables_sequence_id\"] = syllables_sequence_id\n",
      "C:\\Users\\ramma\\AppData\\Local\\Temp\\ipykernel_14832\\2723865572.py:19: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  indv_df.loc[:,\"syllables_sequence_pos\"] = syllables_sequence_pos\n",
      "C:\\Users\\ramma\\AppData\\Local\\Temp\\ipykernel_14832\\2723865572.py:20: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  indv_df.loc[:,\"syllables_sequence_id\"] = syllables_sequence_id\n",
      "C:\\Users\\ramma\\AppData\\Local\\Temp\\ipykernel_14832\\2723865572.py:19: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  indv_df.loc[:,\"syllables_sequence_pos\"] = syllables_sequence_pos\n",
      "C:\\Users\\ramma\\AppData\\Local\\Temp\\ipykernel_14832\\2723865572.py:20: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  indv_df.loc[:,\"syllables_sequence_id\"] = syllables_sequence_id\n",
      "C:\\Users\\ramma\\AppData\\Local\\Temp\\ipykernel_14832\\2723865572.py:19: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  indv_df.loc[:,\"syllables_sequence_pos\"] = syllables_sequence_pos\n",
      "C:\\Users\\ramma\\AppData\\Local\\Temp\\ipykernel_14832\\2723865572.py:20: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  indv_df.loc[:,\"syllables_sequence_id\"] = syllables_sequence_id\n"
     ]
    }
   ],
   "source": [
    "# grabbing sequence positions using onsets and ofsets\n",
    "\n",
    "indv_dfs = []\n",
    "for bird_id in tqdm(syllable_df.bird_id.unique()):\n",
    "    indv_df = syllable_df[syllable_df.bird_id == bird_id]\n",
    "    \n",
    "    syllables_sequence_pos = np.concatenate(\n",
    "        [\n",
    "            np.arange(np.sum(indv_df.key == key))\n",
    "            for key in indv_df.key.unique()\n",
    "        ]\n",
    "    )\n",
    "    syllables_sequence_id = np.concatenate(\n",
    "        [\n",
    "            np.repeat(ki, np.sum(indv_df.key == key))\n",
    "            for ki, key in enumerate(indv_df.key.unique())\n",
    "        ]\n",
    "    )\n",
    "    indv_df.loc[:,\"syllables_sequence_pos\"] = syllables_sequence_pos\n",
    "    indv_df.loc[:,\"syllables_sequence_id\"] = syllables_sequence_id\n",
    "    indv_dfs.append(indv_df)\n",
    "syllable_df = pd.concat(indv_dfs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "748340dd-a213-4e10-b38f-07994aa0190b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>length_s</th>\n",
       "      <th>rate</th>\n",
       "      <th>wav_location</th>\n",
       "      <th>species</th>\n",
       "      <th>key</th>\n",
       "      <th>bird_id</th>\n",
       "      <th>start_time</th>\n",
       "      <th>end_time</th>\n",
       "      <th>audio</th>\n",
       "      <th>spectrogram</th>\n",
       "      <th>syllables_sequence_pos</th>\n",
       "      <th>syllables_sequence_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.126032</td>\n",
       "      <td>44100</td>\n",
       "      <td>C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...</td>\n",
       "      <td>Junco-hyemalis</td>\n",
       "      <td>bout1</td>\n",
       "      <td>139623</td>\n",
       "      <td>0.111429</td>\n",
       "      <td>0.156508</td>\n",
       "      <td>[-0.011349599, -0.09828598, -0.15989809, -0.16...</td>\n",
       "      <td>[[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.126032</td>\n",
       "      <td>44100</td>\n",
       "      <td>C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...</td>\n",
       "      <td>Junco-hyemalis</td>\n",
       "      <td>bout1</td>\n",
       "      <td>139623</td>\n",
       "      <td>0.178730</td>\n",
       "      <td>0.223492</td>\n",
       "      <td>[0.26540476, 0.4290777, 0.37027788, 0.12001611...</td>\n",
       "      <td>[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.126032</td>\n",
       "      <td>44100</td>\n",
       "      <td>C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...</td>\n",
       "      <td>Junco-hyemalis</td>\n",
       "      <td>bout1</td>\n",
       "      <td>139623</td>\n",
       "      <td>0.245079</td>\n",
       "      <td>0.291111</td>\n",
       "      <td>[-0.44933206, -0.42755923, -0.20444313, 0.1096...</td>\n",
       "      <td>[[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,...</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   length_s   rate                                       wav_location  \\\n",
       "0  1.126032  44100  C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...   \n",
       "1  1.126032  44100  C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...   \n",
       "2  1.126032  44100  C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...   \n",
       "\n",
       "          species    key bird_id  start_time  end_time  \\\n",
       "0  Junco-hyemalis  bout1  139623    0.111429  0.156508   \n",
       "1  Junco-hyemalis  bout1  139623    0.178730  0.223492   \n",
       "2  Junco-hyemalis  bout1  139623    0.245079  0.291111   \n",
       "\n",
       "                                               audio  \\\n",
       "0  [-0.011349599, -0.09828598, -0.15989809, -0.16...   \n",
       "1  [0.26540476, 0.4290777, 0.37027788, 0.12001611...   \n",
       "2  [-0.44933206, -0.42755923, -0.20444313, 0.1096...   \n",
       "\n",
       "                                         spectrogram  syllables_sequence_pos  \\\n",
       "0  [[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,...                       0   \n",
       "1  [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,...                       1   \n",
       "2  [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,...                       2   \n",
       "\n",
       "   syllables_sequence_id  \n",
       "0                      0  \n",
       "1                      0  \n",
       "2                      0  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "syllable_df[:3]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0cd5fc04-83f5-4e18-8d95-69dd27b614c7",
   "metadata": {},
   "source": [
    "### Saving the initial dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "c29b682d-e7a6-4dc8-a145-edbe147c0ab9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# optional:  dropping the audio column since we don't need it\n",
    "syllable_df.drop('audio', axis = 1).to_pickle(save_loc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "53bcff5d-698b-4097-ab31-8f32963d1ade",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pickle file successfully converted to CSV and saved at: C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\data\\tutorial-birds.csv\n"
     ]
    }
   ],
   "source": [
    "# optional: saving as csv\n",
    "\n",
    "syllable_df = pd.read_pickle(save_loc)\n",
    "# Save the DataFrame to a CSV file\n",
    "syllable_df.to_csv(csv_file_path, index=False)\n",
    "print(f\"Pickle file successfully converted to CSV and saved at: {csv_file_path}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5528e561-d84f-467a-9069-edb37f810213",
   "metadata": {},
   "source": [
    "## 1.0 Nester: Clustering and Manual Corrections"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a63650c-10ff-47c6-b962-f4818f6abc37",
   "metadata": {},
   "source": [
    "### Syntaxxing\n",
    "In this section, you'll be able to dynamically change the umap and hdbscan parameters as well as correct it's syntaxing. You'll Also be able to save the dataframe and optionally run it through the visualizations above again"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "848e833a-638c-4856-966c-13563234a15a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>length_s</th>\n",
       "      <th>rate</th>\n",
       "      <th>wav_location</th>\n",
       "      <th>species</th>\n",
       "      <th>key</th>\n",
       "      <th>bird_id</th>\n",
       "      <th>start_time</th>\n",
       "      <th>end_time</th>\n",
       "      <th>spectrogram</th>\n",
       "      <th>syllables_sequence_pos</th>\n",
       "      <th>syllables_sequence_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.126032</td>\n",
       "      <td>44100</td>\n",
       "      <td>C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...</td>\n",
       "      <td>Junco-hyemalis</td>\n",
       "      <td>bout1</td>\n",
       "      <td>139623</td>\n",
       "      <td>0.111429</td>\n",
       "      <td>0.156508</td>\n",
       "      <td>[[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.126032</td>\n",
       "      <td>44100</td>\n",
       "      <td>C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...</td>\n",
       "      <td>Junco-hyemalis</td>\n",
       "      <td>bout1</td>\n",
       "      <td>139623</td>\n",
       "      <td>0.178730</td>\n",
       "      <td>0.223492</td>\n",
       "      <td>[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.126032</td>\n",
       "      <td>44100</td>\n",
       "      <td>C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...</td>\n",
       "      <td>Junco-hyemalis</td>\n",
       "      <td>bout1</td>\n",
       "      <td>139623</td>\n",
       "      <td>0.245079</td>\n",
       "      <td>0.291111</td>\n",
       "      <td>[[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,...</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   length_s   rate                                       wav_location  \\\n",
       "0  1.126032  44100  C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...   \n",
       "1  1.126032  44100  C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...   \n",
       "2  1.126032  44100  C:\\Users\\ramma\\Box\\Ram_Ximena_Nicole\\Nester\\tu...   \n",
       "\n",
       "          species    key bird_id  start_time  end_time  \\\n",
       "0  Junco-hyemalis  bout1  139623    0.111429  0.156508   \n",
       "1  Junco-hyemalis  bout1  139623    0.178730  0.223492   \n",
       "2  Junco-hyemalis  bout1  139623    0.245079  0.291111   \n",
       "\n",
       "                                         spectrogram  syllables_sequence_pos  \\\n",
       "0  [[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,...                       0   \n",
       "1  [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,...                       1   \n",
       "2  [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,...                       2   \n",
       "\n",
       "   syllables_sequence_id  \n",
       "0                      0  \n",
       "1                      0  \n",
       "2                      0  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## load data and make sure it looks good\n",
    "syllable_df = pd.read_pickle(save_loc)\n",
    "syllable_df[:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "55dc8bdb-5227-421b-9be5-e63355ff7074",
   "metadata": {},
   "outputs": [],
   "source": [
    "# enable widgets\n",
    "\n",
    "%matplotlib widget"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "728f1de9-42c7-4bee-9ae3-776c2b1afe12",
   "metadata": {},
   "outputs": [],
   "source": [
    "# DEFINING FUNCTIONS\n",
    "\n",
    "# --- Utility ---\n",
    "def generate_label_colors(unique_labels, cmap_name=\"tab20\"):\n",
    "    cmap = colormaps.get_cmap(cmap_name).resampled(len(unique_labels))\n",
    "    return {label: to_hex(cmap(i)) for i, label in enumerate(unique_labels)}\n",
    "\n",
    "def save_current_params(bird_id):\n",
    "    if bird_id:\n",
    "        per_bird_params[bird_id] = {\n",
    "            'min_dist': umap_slider.value,\n",
    "            'mcs': mcs_slider.value\n",
    "        }\n",
    "\n",
    "import os\n",
    "\n",
    "def save_all_figures_callback(_):\n",
    "    bird_id = bird_dropdown.value\n",
    "    if bird_id is None:\n",
    "        print(\"No bird selected.\")\n",
    "        return\n",
    "\n",
    "    # Get bird data\n",
    "    bird_df = syllable_df[syllable_df['bird_id'] == bird_id].copy()\n",
    "    if bird_df.empty:\n",
    "        print(f\"No data for bird '{bird_id}'.\")\n",
    "        return\n",
    "\n",
    "    species = bird_df['species'].iloc[0]\n",
    "    min_dist = umap_slider.value\n",
    "    mcs = mcs_slider.value\n",
    "\n",
    "    # Ensure global clustering exists\n",
    "    if bird_id not in bird_embeddings:\n",
    "        print(\"Clustering not available. Run 'Show All Bouts' first.\")\n",
    "        return\n",
    "\n",
    "    labels = bird_embeddings[bird_id]['labels']\n",
    "    bird_df['editable_label'] = labels\n",
    "    for i, val in edited_labels.items():\n",
    "        if i in bird_df.index:\n",
    "            bird_df.loc[i, 'editable_label'] = val\n",
    "\n",
    "    # Create folder\n",
    "    os.makedirs(output_dir / 'corrected', exist_ok=True)\n",
    "    os.makedirs(output_dir / 'corrected'/'by_bird', exist_ok=True)\n",
    "\n",
    "    # --- Save full bird view ---\n",
    "    bout_keys = sorted(bird_df['key'].unique())\n",
    "    fig, axes = plt.subplots(nrows=len(bout_keys), figsize=(12, 3.5 * len(bout_keys)), sharex=False)\n",
    "\n",
    "    if len(bout_keys) == 1:\n",
    "        axes = [axes]\n",
    "\n",
    "    for ax, key in zip(axes, bout_keys):\n",
    "        bout_df = bird_df[bird_df['key'] == key]\n",
    "        specs = np.array([s / np.max(s) if np.max(s) > 0 else s for s in bout_df['spectrogram'].values])\n",
    "        specs[specs < 0] = 0\n",
    "        label_colors = generate_label_colors(np.unique(bout_df['editable_label']))\n",
    "\n",
    "        for i, spec in enumerate(specs):\n",
    "            label = bout_df.iloc[i]['editable_label']\n",
    "            color = label_colors.get(label, '#aaa')\n",
    "            ax.imshow(spec, aspect='auto', extent=[i, i+1, 0, 1], cmap='magma')\n",
    "            ax.add_patch(mpatches.Rectangle((i, -0.05), 1, 0.1,\n",
    "                                            facecolor=color, edgecolor='black', alpha=0.7, transform=ax.transData))\n",
    "            ax.text(i + 0.5, -0.1, str(label), ha='center', va='top', fontsize=8)\n",
    "\n",
    "        ax.axis('off')\n",
    "        ax.set_xlim(0, len(specs))\n",
    "        ax.set_ylim(-0.3, 1.1)\n",
    "        ax.set_title(f\"{species} {bird_id} | {key} | UMAP: {min_dist}, HDBSCAN: {mcs}\")\n",
    "\n",
    "    fig.tight_layout()\n",
    "    fig.savefig(output_dir / 'corrected' / 'by_bird' / f\"{species}_{bird_id}_ALL_BOUTS.png\", dpi=150)\n",
    "    plt.close(fig)\n",
    "\n",
    "    # --- Save individual bout views ---\n",
    "    for key in bout_keys:\n",
    "        bout_df = bird_df[bird_df['key'] == key]\n",
    "        specs = np.array([s / np.max(s) if np.max(s) > 0 else s for s in bout_df['spectrogram'].values])\n",
    "        specs[specs < 0] = 0\n",
    "        label_colors = generate_label_colors(np.unique(bout_df['editable_label']))\n",
    "\n",
    "        fig, ax = plt.subplots(figsize=(12, 2))\n",
    "        for i, spec in enumerate(specs):\n",
    "            label = bout_df.iloc[i]['editable_label']\n",
    "            color = label_colors.get(label, '#aaa')\n",
    "            ax.imshow(spec, aspect='auto', extent=[i, i+1, 0, 1], cmap='magma')\n",
    "            ax.add_patch(mpatches.Rectangle((i, -0.05), 1, 0.1,\n",
    "                                            facecolor=color, edgecolor='black', alpha=0.7, transform=ax.transData))\n",
    "            ax.text(i + 0.5, -0.1, str(label), ha='center', va='top', fontsize=8)\n",
    "        ax.axis('off')\n",
    "        ax.set_xlim(0, len(specs))\n",
    "        ax.set_ylim(-0.3, 1.1)\n",
    "        ax.set_title(f\"{species} {bird_id} | {key} | UMAP: {min_dist}, HDBSCAN: {mcs}\")\n",
    "        fig.tight_layout()\n",
    "        fig.savefig(output_dir/ 'corrected' / f\"{species}_{bird_id}_{key}.png\", dpi=150)\n",
    "        plt.close(fig)\n",
    "\n",
    "    print(f\"All figures saved for bird {bird_id} in output_figures/{bird_id}_{key}/\")\n",
    "\n",
    "# --- Main Plot Logic ---\n",
    "def plot_all_bouts_for_bird():\n",
    "    bird_id = bird_dropdown.value\n",
    "    if bird_id is None:\n",
    "        return\n",
    "\n",
    "    bird_df = syllable_df[syllable_df['bird_id'] == bird_id].copy()\n",
    "    if bird_df.empty:\n",
    "        with plot_output:\n",
    "            plot_output.clear_output(wait=True)\n",
    "            print(f\"No data for bird '{bird_id}'.\")\n",
    "        return\n",
    "\n",
    "    # --- UMAP + HDBSCAN for full bird ---\n",
    "    specs = np.array([s / np.max(s) if np.max(s) > 0 else s for s in bird_df['spectrogram'].values])\n",
    "    specs[specs < 0] = 0\n",
    "    flat = specs.reshape(specs.shape[0], -1)\n",
    "\n",
    "    min_dist = umap_slider.value\n",
    "    mcs = mcs_slider.value\n",
    "    params = {'min_dist': min_dist, 'mcs': mcs}\n",
    "\n",
    "    cache = bird_embeddings.get(bird_id)\n",
    "    if cache and cache['params'] == params:\n",
    "        labels = cache['labels']\n",
    "    else:\n",
    "        embedded = umap.UMAP(min_dist=min_dist, random_state=seed).fit_transform(flat)\n",
    "        labels = hdbscan.HDBSCAN(min_cluster_size=mcs, min_samples=1).fit_predict(embedded)\n",
    "        bird_embeddings[bird_id] = {'labels': labels, 'params': params}\n",
    "\n",
    "    bird_df['editable_label'] = labels\n",
    "    for i, val in edited_labels.items():\n",
    "        if i in bird_df.index:\n",
    "            bird_df.loc[i, 'editable_label'] = val\n",
    "\n",
    "    syllable_df.loc[bird_df.index, 'hdbscan_mcs'] = mcs\n",
    "    syllable_df.loc[bird_df.index, 'umap_min_dist'] = min_dist\n",
    "\n",
    "\n",
    "    # --- Plot each bout row ---\n",
    "    bout_keys = sorted(bird_df['key'].unique())\n",
    "    # Fail-safe: don't plot all bouts if there are too many\n",
    "    if len(bout_keys) > 10:\n",
    "        with plot_output:\n",
    "            plot_output.clear_output(wait=True)\n",
    "            print(f\"⚠️ Bird '{bird_id}' has {len(bout_keys)} bouts — showing individual view instead.\")\n",
    "        update_plot()\n",
    "        return\n",
    "    with plot_output:\n",
    "        plot_output.clear_output(wait=True)\n",
    "        plt.close('all')\n",
    "        fig, axes = plt.subplots(nrows=len(bout_keys), figsize=(12, 3.5 * len(bout_keys)), sharex=False)\n",
    "\n",
    "        if len(bout_keys) == 1:\n",
    "            axes = [axes]\n",
    "\n",
    "        for ax, key in zip(axes, bout_keys):\n",
    "            bout_df = bird_df[bird_df['key'] == key].copy()\n",
    "            specs = np.array([s / np.max(s) if np.max(s) > 0 else s for s in bout_df['spectrogram'].values])\n",
    "            specs[specs < 0] = 0\n",
    "            label_colors = generate_label_colors(np.unique(bout_df['editable_label']))\n",
    "            for i, spec in enumerate(specs):\n",
    "                label = bout_df.iloc[i]['editable_label']\n",
    "                color = label_colors.get(label, '#aaa')\n",
    "                ax.imshow(spec, aspect='auto', extent=[i, i + 1, 0, 1], cmap='magma')\n",
    "                ax.add_patch(mpatches.Rectangle((i, -0.05), 1, 0.1, facecolor=color,\n",
    "                                                edgecolor='black', alpha=0.7, transform=ax.transData))\n",
    "                ax.text(i + 0.5, -0.1, str(label), ha='center', va='top', fontsize=8, color='black')\n",
    "            ax.set_xlim(0, len(specs))\n",
    "            ax.set_ylim(-0.3, 1.1)\n",
    "            ax.axis('off')\n",
    "            species = bout_df['species'].iloc[0]\n",
    "            ax.set_title(f\"{species} {bird_id} | {key} | UMAP: {min_dist}, HDBSCAN: {mcs}\")\n",
    "\n",
    "        plt.show()\n",
    "\n",
    "    # --- Summary after plotting ---\n",
    "    label_counts = bird_df['editable_label'].value_counts().to_dict()\n",
    "    with plot_output:\n",
    "        print(f\"\\nLabels for {species} {bird_id}:\")\n",
    "        for label, count in sorted(label_counts.items()):\n",
    "            print(f\" {label}: {count}\")\n",
    "        print(f\"\\nTotal syllables: {len(bird_df)}\")\n",
    "\n",
    "# --- Bout Zoom View ---\n",
    "def update_plot(change=None):\n",
    "    global current_axes, active_df\n",
    "    bird_id = bird_dropdown.value\n",
    "    key = key_dropdown.value\n",
    "    if key is None:\n",
    "        return\n",
    "\n",
    "    bird_df = syllable_df[syllable_df['bird_id'] == bird_id].copy()\n",
    "    if bird_id not in bird_embeddings:\n",
    "        return\n",
    "\n",
    "    labels = bird_embeddings[bird_id]['labels']\n",
    "    bird_df['editable_label'] = labels\n",
    "    for i, val in edited_labels.items():\n",
    "        if i in bird_df.index:\n",
    "            bird_df.loc[i, 'editable_label'] = val\n",
    "\n",
    "    bird_df = bird_df[bird_df['key'] == key]\n",
    "    if bird_df.empty:\n",
    "        return\n",
    "\n",
    "    specs = np.array([s / np.max(s) if np.max(s) > 0 else s for s in bird_df['spectrogram'].values])\n",
    "    specs[specs < 0] = 0\n",
    "\n",
    "    label_colors = generate_label_colors(np.unique(bird_df['editable_label']))\n",
    "    species = bird_df['species'].iloc[0]\n",
    "    mcs = mcs_slider.value\n",
    "    min_dist = umap_slider.value\n",
    "\n",
    "    with plot_output:\n",
    "        plot_output.clear_output(wait=True)\n",
    "        plt.close('all')\n",
    "        fig, ax = plt.subplots(figsize=(12, 2))\n",
    "        fig.canvas.manager.set_window_title(f\"{species}_{bird_id}_{key}\")\n",
    "        current_axes = ax\n",
    "\n",
    "        for i, spec in enumerate(specs):\n",
    "            label = bird_df.iloc[i]['editable_label']\n",
    "            color = label_colors.get(label, '#aaa')\n",
    "            ax.imshow(spec, aspect='auto', extent=[i, i + 1, 0, 1], cmap='magma')\n",
    "            ax.add_patch(mpatches.Rectangle((i, -0.05), 1, 0.1, facecolor=color,\n",
    "                                            edgecolor='black', alpha=0.7, transform=ax.transData))\n",
    "            ax.text(i + 0.5, -0.1, str(label), ha='center', va='top', fontsize=8, color='black')\n",
    "\n",
    "        ax.set_xlim(0, len(specs))\n",
    "        ax.set_ylim(-0.1, 1.05)\n",
    "        ax.axis('off')\n",
    "        ax.set_title(f\"{species} | Bird {bird_id} | {key} | UMAP: {min_dist}, HDBSCAN: {mcs}\")\n",
    "        fig.canvas.mpl_connect(\"button_press_event\", on_click)\n",
    "        plt.show()\n",
    "\n",
    "    # --- Summary printout ---\n",
    "    label_counts = bird_df['editable_label'].value_counts().to_dict()\n",
    "    with plot_output:\n",
    "        print(f\"\\nLabels for {species} {bird_id} {key}: {len(bird_df)} syllables\")\n",
    "        for label, count in sorted(label_counts.items()):\n",
    "            print(f\"{label}: {count}\")\n",
    "    \n",
    "\n",
    "    global active_df\n",
    "    active_df = bird_df\n",
    "\n",
    "# --- Click Editing ---\n",
    "def on_click(event):\n",
    "    global active_df\n",
    "    if current_axes is None or event.inaxes != current_axes or active_df is None:\n",
    "        return\n",
    "\n",
    "    i = int(event.xdata)\n",
    "    if 0 <= i < len(active_df):\n",
    "        actual_idx = active_df.index[i]\n",
    "        old = active_df.loc[actual_idx, 'editable_label']\n",
    "        step = direction_toggle.value\n",
    "        new = old + step if old + step >= 0 else 0\n",
    "\n",
    "        edit_history.append((actual_idx, old))\n",
    "        active_df.loc[actual_idx, 'editable_label'] = new\n",
    "        edited_labels[actual_idx] = new\n",
    "        update_plot()\n",
    "\n",
    "# --- Observer Logic ---\n",
    "def update_keys_for_bird(change):\n",
    "    old_bird = getattr(update_keys_for_bird, 'last_bird', None)\n",
    "    bird_id = change['new']\n",
    "    update_keys_for_bird.last_bird = bird_id\n",
    "\n",
    "    save_current_params(old_bird)\n",
    "\n",
    "    if bird_id in per_bird_params:\n",
    "        umap_slider.unobserve_all()\n",
    "        mcs_slider.unobserve_all()\n",
    "        umap_slider.value = per_bird_params[bird_id]['min_dist']\n",
    "        mcs_slider.value = per_bird_params[bird_id]['mcs']\n",
    "        rebind_slider_observers()\n",
    "\n",
    "    keys = syllable_df[syllable_df['bird_id'] == bird_id]['key'].unique()\n",
    "    key_dropdown.options = sorted(keys)\n",
    "    key_dropdown.value = None\n",
    "\n",
    "    plot_all_bouts_for_bird()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5d95ff09-7395-4d60-9aa6-8ef0fd26ad79",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2e1106c2fc87427ea22f4268e4020d0c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox(children=(HBox(children=(Dropdown(description='Bird:', options=('103315', '139623', '775292', '79618'), v…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# --- Internal state ---\n",
    "edited_labels = {}\n",
    "active_df = None\n",
    "current_axes = None\n",
    "edit_history = []\n",
    "\n",
    "# --- UI Controls ---\n",
    "bird_dropdown = widgets.Dropdown(\n",
    "    options=sorted(syllable_df['bird_id'].unique()),\n",
    "    description='Bird:'\n",
    ")\n",
    "key_dropdown = widgets.Dropdown(description='Bout:')\n",
    "umap_slider = widgets.FloatText(\n",
    "    description='UMAP distance', value=0.25,\n",
    "    step = 0.01,\n",
    "    layout=widgets.Layout(width=\"250px\"),\n",
    "    style={'description_width': 'initial'}\n",
    ")\n",
    "mcs_slider = widgets.IntText(description='Cluster Size', value=5)\n",
    "direction_toggle = widgets.ToggleButtons(\n",
    "    options=[('↑ Increment', 1), ('↓ Decrement', -1)],\n",
    "    description='Click mode:',\n",
    "    style={'description_width': 'initial'}\n",
    ")\n",
    "plot_all_bouts_button = widgets.Button(\n",
    "    description=\"Show All Bouts for Bird\",\n",
    "    layout=widgets.Layout(width=\"300px\")\n",
    ")\n",
    "save_figures_button = widgets.Button(\n",
    "    description=\"Save All Figures\",\n",
    "    layout=widgets.Layout(width=\"300px\")\n",
    ")\n",
    "plot_output = widgets.Output()\n",
    "\n",
    "# --- Embedding & Clustering Memory ---\n",
    "bird_embeddings = {}  # bird_id → {embedded, labels, params}\n",
    "per_bird_params = {}\n",
    "\n",
    "# --- Making UMAP & HDBSCAN columns ----\n",
    "if 'mcs_used' not in syllable_df.columns:\n",
    "    syllable_df['hdbscan_mcs'] = 5\n",
    "if 'umap_min_dist' not in syllable_df.columns:\n",
    "    syllable_df['umap_min_dist'] = 0.25\n",
    "seed = 1234\n",
    "\n",
    "# --- Hook everything up ---\n",
    "bird_dropdown.observe(update_keys_for_bird, names='value')\n",
    "key_dropdown.observe(update_plot, names='value')\n",
    "plot_all_bouts_button.on_click(lambda _: plot_all_bouts_for_bird())\n",
    "save_figures_button.on_click(save_all_figures_callback)\n",
    "def on_param_change(change):\n",
    "    save_current_params(bird_dropdown.value)\n",
    "    plot_all_bouts_for_bird()\n",
    "    \n",
    "def rebind_slider_observers():\n",
    "    umap_slider.observe(on_param_change, names='value')\n",
    "    mcs_slider.observe(on_param_change, names='value')\n",
    "    \n",
    "# Initial bind\n",
    "rebind_slider_observers()\n",
    "\n",
    "# Initialize key options and layout\n",
    "update_keys_for_bird({'new': bird_dropdown.value})\n",
    "display(widgets.VBox([\n",
    "    widgets.HBox([bird_dropdown, key_dropdown, umap_slider, mcs_slider]),\n",
    "    direction_toggle,\n",
    "    widgets.HBox([plot_all_bouts_button]),\n",
    "    widgets.HBox([save_figures_button]),\n",
    "    plot_output\n",
    "]))\n",
    "update_plot()\n",
    "if active_df is not None:\n",
    "    syllable_df.loc[active_df.index, 'hdbscan_labels'] = active_df['editable_label']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "526557f7-59aa-4d0c-b834-348324c5e976",
   "metadata": {},
   "source": [
    "                                                    After running corrections simply save here:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "deee5aff-1d18-461a-8a50-d2ac991a979d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# CSV\n",
    "syllable_df.to_csv(csv_path_corrected, index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "866e6e06-91db-44ff-93ac-014fbad6252c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Pickle\n",
    "syllable_df.to_pickle(pickle_corrected)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d7a62ad-0d01-4295-850d-105871a77b53",
   "metadata": {},
   "source": [
    "## 1.5 Visualizations "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f80b088-464c-45a6-8776-71d0b4629b27",
   "metadata": {},
   "source": [
    "                                                                Loading the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "20aa723c-eb0b-48f2-b4e1-75750f9f6455",
   "metadata": {},
   "outputs": [],
   "source": [
    "syllable_df = pd.read_pickle(pickle_file_path_corrected)\n",
    "syllable_df[:3]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4419d896-5a41-4811-b756-ac4cd5c1b710",
   "metadata": {},
   "source": [
    "### Umap Projections"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2fddaea7-4e40-4879-90d3-ae26ec17ffc0",
   "metadata": {},
   "source": [
    "                                                            Per bird UMAP Projection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b0daef33-a1d0-45ec-9035-4d4d167878fb",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Loop through unique bird IDs in the DataFrame\n",
    "for bird_id in tqdm(np.sort(syllable_df.bird_id.unique()), desc=\"Processing Birds\"):\n",
    "    # Get the species corresponding to the bird ID\n",
    "    species = syllable_df[syllable_df.bird_id == bird_id].species.unique()[0]\n",
    "    print(f\"Processing Bird ID: {bird_id}, Species: {species}, Count: {np.sum(syllable_df.bird_id == bird_id)}\")\n",
    "    \n",
    "    # Filter the DataFrame for the current bird ID and exclude noise\n",
    "    bird_df = syllable_df[(syllable_df.bird_id == bird_id) & (syllable_df.hdbscan_labels != -1)]\n",
    "    \n",
    "    if bird_df.empty:\n",
    "        print(f\"No valid data for Bird ID: {bird_id}, skipping.\")\n",
    "        continue\n",
    "    \n",
    "    # Normalize and extract spectrograms\n",
    "    specs = np.array([\n",
    "        i / np.max(i) if np.max(i) > 0 else np.zeros_like(i)\n",
    "        for i in bird_df.spectrogram.values\n",
    "    ])\n",
    "    \n",
    "    # Check for consistent spectrogram shapes\n",
    "    shapes = [np.shape(i) for i in bird_df.spectrogram.values]\n",
    "    if len(set(shapes)) > 1:\n",
    "        print(f\"Inconsistent spectrogram shapes for Bird ID: {bird_id}, skipping.\")\n",
    "        continue\n",
    "    \n",
    "    # Flatten the spectrograms into 1D\n",
    "    try:\n",
    "        specs_flattened = flatten_spectrograms(specs)\n",
    "    except ValueError as e:\n",
    "        print(f\"Error flattening spectrograms for Bird ID: {bird_id}: {e}\")\n",
    "        continue\n",
    "    \n",
    "    # Dropping NaN rows\n",
    "    valid_mask = ~np.isnan(specs_flattened).any(axis=1)\n",
    "    specs_flattened_clean = specs_flattened[valid_mask]\n",
    "    \n",
    "    if specs_flattened_clean.size == 0:\n",
    "        print(f\"All spectrograms are invalid for Bird ID: {bird_id}, skipping.\")\n",
    "        continue\n",
    "    \n",
    "    # Project (you can choose different UMAP parameters here)\n",
    "    # Use value from column if available, fallback to global umap_min_dist\n",
    "    bird_umap_dist = bird_df['umap_min_dist'].dropna().unique()\n",
    "    if len(bird_umap_dist) == 1:\n",
    "        umap_dist_used = bird_umap_dist[0]\n",
    "    else:\n",
    "        umap_dist_used = umap_min_dist  # fallback\n",
    "\n",
    "    fit = umap.UMAP(min_dist=umap_dist_used, verbose=True, random_state=seed, n_neighbors=umap_n_neighbors)\n",
    "    z = fit.fit_transform(specs_flattened_clean)\n",
    "    z = np.vstack(z)\n",
    "    \n",
    "    # Ensure labels and projections match dimensions\n",
    "    labels = bird_df['hdbscan_labels'].values\n",
    "    if len(labels) != len(z):\n",
    "        print(f\"Mismatch in dimensions for Bird ID: {bird_id}: labels={len(labels)}, projections={len(z)}, skipping.\")\n",
    "        continue\n",
    "\n",
    "    # Create a scatterplot of the projections\n",
    "    scatter_spec(\n",
    "        z,\n",
    "        specs,\n",
    "        column_size=10,\n",
    "        pal_color=\"tab20\",\n",
    "        color_points=False,\n",
    "        enlarge_points=5,\n",
    "        figsize=(10, 10),\n",
    "        scatter_kwargs={\n",
    "            'labels': labels,\n",
    "            'alpha': 0.25,\n",
    "            's': 20,\n",
    "            'show_legend': True\n",
    "        },\n",
    "        matshow_kwargs={\n",
    "            'cmap': plt.cm.Greys\n",
    "        },\n",
    "        line_kwargs={\n",
    "            'lw': 1,\n",
    "            'ls': \"dashed\",\n",
    "            'alpha': 0.25,\n",
    "        },\n",
    "        draw_lines=True,\n",
    "    )\n",
    "    \n",
    "    # Save the plot with bird ID and species in the filename\n",
    "    output_path = os.path.join(output_dir / DATASET_ID /'umap'/'indiv_mapping', f\"Individual_mapping_{species}_{bird_id}_RST.png\")\n",
    "    os.makedirs(output_dir / DATASET_ID /'umap'/'indiv_mapping', exist_ok=True)\n",
    "    plt.savefig(output_path, dpi=300, bbox_inches=\"tight\")\n",
    "    print(f\"Saved figure for Bird ID: {bird_id}, Species: {species} at {output_path}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff91f741-3f3a-420f-81f3-2a80a6d8d533",
   "metadata": {},
   "source": [
    "                                                            All Species Colored by Species\n",
    "\n",
    "                        If you want to change it to colored by Cluster simply change 'labels' in skatterkwargs to hdbscan_labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "192c981d-7016-4ff3-89a1-352bf3ed2332",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Filter the DataFrame to exclude noise\n",
    "syllable_df_clean = syllable_df[syllable_df.hdbscan_labels != -1].copy()\n",
    "\n",
    "# Use per-syllable UMAP parameters if available\n",
    "umap_dist_vals = syllable_df_clean['umap_min_dist'].dropna().unique()\n",
    "mcs_vals = syllable_df_clean['mcs_used'].dropna().unique()\n",
    "\n",
    "# Fallback defaults\n",
    "umap_dist = umap_dist_vals[0] if len(umap_dist_vals) == 1 else umap_min_dist\n",
    "hdbscan_mcs_used = mcs_vals[0] if len(mcs_vals) == 1 else hdbscan_mcs\n",
    "\n",
    "print(f\"Using UMAP min_dist: {umap_dist} | HDBSCAN min cluster size: {hdbscan_mcs_used}\")\n",
    "\n",
    "# Normalize and extract spectrograms\n",
    "specs = np.array([\n",
    "    i / np.max(i) if np.max(i) > 0 else np.zeros_like(i)\n",
    "    for i in syllable_df_clean['spectrogram'].values\n",
    "])\n",
    "\n",
    "# Flatten the spectrograms into 1D\n",
    "specs_flattened = flatten_spectrograms(specs)\n",
    "\n",
    "# Drop rows with NaN values\n",
    "valid_mask = ~np.isnan(specs_flattened).any(axis=1)\n",
    "specs_flattened_clean = specs_flattened[valid_mask]\n",
    "specs_clean = specs[valid_mask]\n",
    "syllable_df_clean = syllable_df_clean[valid_mask].reset_index(drop=True)\n",
    "\n",
    "# Project the flattened spectrograms into 2D space using UMAP\n",
    "fit = umap.UMAP(min_dist=umap_dist, verbose=True, random_state=seed, target_weight=0.0)\n",
    "z = fit.fit_transform(specs_flattened_clean)\n",
    "z = np.vstack(z)\n",
    "\n",
    "# Extract species labels for coloring\n",
    "species_labels = syllable_df_clean['species'].values\n",
    "hdbscan_labels = syllable_df_clean['hdbscan_labels'].values\n",
    "\n",
    "# Create a scatterplot of the projections, colored by species\n",
    "scatter_spec(\n",
    "    z,\n",
    "    specs_clean,\n",
    "    column_size=20,\n",
    "    pal_color=\"hls\",\n",
    "    color_points=False,\n",
    "    enlarge_points=20,\n",
    "    figsize=(10, 10),\n",
    "    scatter_kwargs={\n",
    "        'labels': species_labels,\n",
    "        'alpha': 0.2,\n",
    "        's': 7,\n",
    "        'show_legend': True\n",
    "    },\n",
    "    matshow_kwargs={\n",
    "        'cmap': plt.cm.Greys\n",
    "    },\n",
    "    line_kwargs={\n",
    "        'lw': 1,\n",
    "        'ls': \"dashed\",\n",
    "        'alpha': 0.25\n",
    "    },\n",
    "    draw_lines=True\n",
    ")\n",
    "\n",
    "# Save the figure\n",
    "output_path = output_dir / DATASET_ID / 'umap' / \"all_species_scatterplot.png\"\n",
    "os.makedirs(output_dir / DATASET_ID / 'umap' /, exist_ok=True)\n",
    "plt.savefig(output_path, dpi=300, bbox_inches=\"tight\")\n",
    "print(f\"✔ Saved figure for all species at {output_path}\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97e75331-abda-496f-8389-2276031a0b05",
   "metadata": {},
   "source": [
    "### Colorcoded Spectrograms according to Syntaxxing"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e335052a-218a-4b79-8e80-d5fc04dd3da9",
   "metadata": {},
   "source": [
    "                                                                    Saving by Bird by Bout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e67a85e-57fb-488f-bf6f-0cc73fe0e5f7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Generate a color dictionary for hdbscan_labels\n",
    "def generate_label_colors(unique_labels, default_color=\"white\", cmap_name=\"tab20\"):\n",
    "    cmap = get_cmap(cmap_name, len(unique_labels))\n",
    "    label_colors = {label: to_hex(cmap(i)) for i, label in enumerate(unique_labels)}\n",
    "    label_colors[-1] = default_color  # Assign white to label -1\n",
    "    return label_colors\n",
    "\n",
    "# Loop through unique species in the DataFrame\n",
    "for species in np.sort(syllable_df['species'].unique()):\n",
    "    species_df = syllable_df[syllable_df['species'] == species]\n",
    "    print(f\"Species: {species}, Total Entries: {len(species_df)}\")\n",
    "\n",
    "    # Loop through each bird_id in the species\n",
    "    for bird_id in np.sort(species_df['bird_id'].unique()):\n",
    "        bird_df = species_df[species_df['bird_id'] == bird_id]\n",
    "        print(f\"  Bird ID: {bird_id}, Entries: {len(bird_df)}\")\n",
    "\n",
    "        # Loop through each key (bout) for the bird\n",
    "        for key in bird_df['key'].unique():\n",
    "            bout_df = bird_df[bird_df['key'] == key]\n",
    "            print(f\"    Bout Key: {key}, Entries: {len(bout_df)}\")\n",
    "\n",
    "            # Normalize spectrograms and create an array\n",
    "            specs = np.array([i / np.max(i) if np.max(i) > 0 else i for i in bout_df['spectrogram'].values])\n",
    "            specs[specs < 0] = 0\n",
    "\n",
    "            # Generate label colors for the current bout\n",
    "            unique_labels = bout_df['hdbscan_labels'].unique()\n",
    "            label_colors = generate_label_colors(unique_labels)\n",
    "\n",
    "            # Dynamically adjust column width and figure size\n",
    "            col_width = 3  # Width of a single spectrogram column\n",
    "            figure_width = col_width * len(bout_df)\n",
    "            plt.figure(figsize=(figure_width, 2))  # Fixed height of 2 inches\n",
    "\n",
    "            print(f\"      Drawing spectrograms for Bout Key: {key}...\")\n",
    "            draw_spec_set(specs, zoom=3, maxrows=1, colsize=len(bout_df))  # Match colsize to bout_df length\n",
    "\n",
    "            # Add rectangles to overlay hdbscan_labels\n",
    "            ax = plt.gca()\n",
    "            for idx, row in enumerate(bout_df.itertuples(index=False)):\n",
    "                color = label_colors[row.hdbscan_labels]\n",
    "                rect_width = 1 / len(bout_df)  # Adjust rectangle width to match spectrogram\n",
    "                rect_x = idx * rect_width  # Position the rectangle to align with spectrogram\n",
    "\n",
    "                # Add the rectangle\n",
    "                ax.add_patch(\n",
    "                    mpatches.Rectangle(\n",
    "                        (rect_x, 0),          # Rectangle starts at (x, y)\n",
    "                        rect_width,           # Rectangle width\n",
    "                        0.2,                    # Rectangle height\n",
    "                        transform=ax.transAxes,  # Use axes coordinates\n",
    "                        edgecolor=\"black\",       \n",
    "                        facecolor=color,\n",
    "                        alpha=0.5,\n",
    "                    )\n",
    "                )\n",
    "\n",
    "            plt.title(f\"Spectrograms for Species: {species}, Bird ID: {bird_id}, Bout Key: {key}\")\n",
    "            output_path = os.path.join(output_dir / DATASET_ID /'spectrograms_colored' / 'by_bout', f\"spec_colored_{species}_{bird_id}_{key}_RST.png\")\n",
    "            os.makedirs(output_dir / DATASET_ID / 'spectrograms_colored'/'by_bout', exist_ok=True)\n",
    "            plt.savefig(output_path, dpi=300, bbox_inches=\"tight\")\n",
    "            print(f\"Saved figure for Bird ID: {bird_id}, Species: {species} at {output_path}\")\n",
    "            plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6277297-c16a-49dc-9fae-466b297ed994",
   "metadata": {},
   "source": [
    "                                                                    Saving by Bird"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f942bfd-0365-4bc8-8c52-29345e7fc047",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Saving by Bird \n",
    "\n",
    "# Generate a color dictionary for hdbscan_labels\n",
    "def generate_label_colors(unique_labels, default_color=\"white\", cmap_name=\"tab20\"):\n",
    "    cmap = get_cmap(cmap_name, len(unique_labels))\n",
    "    label_colors = {label: to_hex(cmap(i)) for i, label in enumerate(unique_labels)}\n",
    "    label_colors[-1] = default_color  # Assign white to label -1\n",
    "    return label_colors\n",
    "\n",
    "# Loop through unique species in the DataFrame\n",
    "for species in np.sort(syllable_df['species'].unique()):\n",
    "    species_df = syllable_df[syllable_df['species'] == species]\n",
    "    print(f\"Species: {species}, Total Entries: {len(species_df)}\")\n",
    "\n",
    "    # Loop through each bird_id in the species\n",
    "    for bird_id in np.sort(species_df['bird_id'].unique()):\n",
    "        bird_df = species_df[species_df['bird_id'] == bird_id]\n",
    "        print(f\"  Bird ID: {bird_id}, Entries: {len(bird_df)}\")\n",
    "\n",
    "        # Collect spectrograms per key for this bird\n",
    "        key_groups = {key: bird_df.loc[bird_df[\"key\"] == key]for key in bird_df[\"key\"].unique()}\n",
    "\n",
    "\n",
    "        # Dynamically set figure height based on number of keys\n",
    "        row_height = 4  # Height per key\n",
    "        figure_height = row_height * len(key_groups)  \n",
    "        col_width = 3  # Width of a single spectrogram column\n",
    "        figure_width = col_width * max(len(group) for group in key_groups.values()) \n",
    "\n",
    "        fig, axes = plt.subplots(len(key_groups), 1, figsize=(figure_width, figure_height), squeeze=False)\n",
    "        num_keys = len(key_groups)\n",
    "        title_fontsize = max(12, min(20, 16 + num_keys // 3))  # Adjust within a reasonable rang\n",
    "\n",
    "        # Iterate over each key and plot on a new row\n",
    "        for idx, (key, bout_df) in enumerate(key_groups.items()):\n",
    "            specs = np.array([i / np.max(i) if np.max(i) > 0 else i for i in bout_df['spectrogram'].values])\n",
    "            specs[specs < 0] = 0\n",
    "            \n",
    "            unique_labels = bout_df['hdbscan_labels'].unique()\n",
    "            label_colors = generate_label_colors(unique_labels)\n",
    "\n",
    "            ax = axes[idx, 0]\n",
    "            draw_spec_set(specs, zoom=3, maxrows=2, colsize=len(bout_df), ax=ax)\n",
    "\n",
    "            # Add colored label overlay\n",
    "            for i, row in enumerate(bout_df.itertuples(index=False)):\n",
    "                color = label_colors[row.hdbscan_labels]\n",
    "                rect_width = 1 / len(bout_df)\n",
    "                rect_x = i * rect_width\n",
    "                ax.add_patch(mpatches.Rectangle((rect_x, 0), rect_width, 0.2, transform=ax.transAxes, \n",
    "                                                 edgecolor=\"black\", facecolor=color, alpha=0.5))\n",
    "            ax.set_title(f\"{key}\")\n",
    "\n",
    "        fig.suptitle(f\"Spectrograms for Bird ID: {bird_id}, Species: {species}\",fontsize = title_fontsize)\n",
    "        output_path = os.path.join(output_dir / DATASET_ID / 'spectrograms_colored' / 'by_bird', f\"spec_colored_{species}_{bird_id}_RST.png\")\n",
    "        os.makedirs(output_dir / DATASET_ID / 'spectrograms_colored'/'by_bird', exist_ok=True)\n",
    "        plt.savefig(output_path, dpi=300, bbox_inches=\"tight\")\n",
    "        print(f\"Saved figure for Bird ID: {bird_id}, Species: {species} at {output_path}\")\n",
    "        plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
